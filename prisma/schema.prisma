// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  articles Article[]
}

model Thought {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  status     String
  content    String
  likesCount Int       @default(0)
  comments   Comment[]
}

model Article {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  title          String
  content        String
  status         String
  likesCount     Int              @default(0)
  views          Int              @default(0)
  slug           String           @unique
  categoryId     Int
  category       Category         @relation(fields: [categoryId], references: [id])
  comments       Comment[]
  ArticleViewLog ArticleViewLog[]
}

model Note {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  content     String
  status      String
  views       Int           @default(0)
  likesCount  Int           @default(0)
  comments    Comment[]
  NoteViewLog NoteViewLog[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  avatarUrl   String?
  nickname    String?
  email       String?
  website     String?
  clientIp    String?
  userAgent   String?
  articleSlug String?
  noteId      Int?
  thoughtId   Int?
  article     Article? @relation(fields: [articleSlug], references: [slug])
  note        Note?    @relation(fields: [noteId], references: [id])
  thought     Thought? @relation(fields: [thoughtId], references: [id])
}

model ArticleViewLog {
  id          Int      @id @default(autoincrement())
  articleSlug String
  article     Article  @relation(fields: [articleSlug], references: [slug])
  viewCount   Int
  createdAt   DateTime @default(now())
}

model NoteViewLog {
  id        Int      @id @default(autoincrement())
  noteId    Int
  note      Note     @relation(fields: [noteId], references: [id])
  viewCount Int
  createdAt DateTime @default(now())
}
